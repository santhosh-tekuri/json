// Code generated by jsonc; DO NOT EDIT.

package tests

import "github.com/santhosh-tekuri/json"

func (s *stringVal) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("stringVal", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if val := de.Token(); !val.Null() {
				s.Field, err = val.String("stringVal.Field")
			}
		default:
			err = de.Skip()
		}
		return
	})
}

func (s *structTag) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("structTag", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Name"):
			if val := de.Token(); !val.Null() {
				s.Field, err = val.String("structTag.Field")
			}
		default:
			err = de.Skip()
		}
		return
	})
}

func (e *excludeTag) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("excludeTag", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {

		default:
			err = de.Skip()
		}
		return
	})
}

func (u *unexported) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("unexported", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {

		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrString) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrString", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []string{}
			}
			err = json.DecodeArr("arrString.Field", de, func(de json.Decoder) error {
				item, err := de.Token().String("arrString.Field[]")
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (p *ptrString) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("ptrString", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			p.Field = nil
			if val := de.Token(); !val.Null() {
				var pval string
				pval, err = val.String("ptrString.Field")
				p.Field = &pval
			}
		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrPtrString) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrPtrString", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []*string{}
			}
			err = json.DecodeArr("arrPtrString.Field", de, func(de json.Decoder) error {
				var item *string
				var err error
				if val := de.Token(); !val.Null() {
					var pval string
					pval, err = val.String("arrPtrString.Field[]")
					item = &pval
				}
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (i *interfaceVal) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("interfaceVal", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			i.Field, err = de.Decode()
		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrInterface) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrInterface", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []interface{}{}
			}
			err = json.DecodeArr("arrInterface.Field", de, func(de json.Decoder) error {
				item, err := de.Decode()
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (s *structVal) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("structVal", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			err = s.Field.DecodeJSON(de)
		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []stringVal{}
			}
			err = json.DecodeArr("arrStruct.Field", de, func(de json.Decoder) error {
				item := stringVal{}
				err := item.DecodeJSON(de)
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (p *ptrStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("ptrStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			p.Field = nil
			if !de.Peek().Null() {
				p.Field = &stringVal{}
			}
			err = p.Field.DecodeJSON(de)
		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrPtrStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrPtrStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []*stringVal{}
			}
			err = json.DecodeArr("arrPtrStruct.Field", de, func(de json.Decoder) error {
				var item *stringVal
				if !de.Peek().Null() {
					item = &stringVal{}
				}
				err := item.DecodeJSON(de)
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (a *anonStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("anonStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			err = json.DecodeObj("anonStruct.Field", de, func(de json.Decoder, prop json.Token) (err error) {
				switch {
				case prop.Eq("Field"):
					if val := de.Token(); !val.Null() {
						a.Field.Field, err = val.String("anonStruct.Field.Field")
					}
				default:
					err = de.Skip()
				}
				return
			})

		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrAnonStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrAnonStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []struct {
					Field string
				}{}
			}
			err = json.DecodeArr("arrAnonStruct.Field", de, func(de json.Decoder) error {
				item := struct {
					Field string
				}{}
				err := json.DecodeObj("arrAnonStruct.Field[]", de, func(de json.Decoder, prop json.Token) (err error) {
					switch {
					case prop.Eq("Field"):
						if val := de.Token(); !val.Null() {
							item.Field, err = val.String("arrAnonStruct.Field[].Field")
						}
					default:
						err = de.Skip()
					}
					return
				})
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (p *ptrAnonStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("ptrAnonStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			p.Field = nil
			if !de.Peek().Null() {
				p.Field = &struct {
					Field string
				}{}
			}
			err = json.DecodeObj("ptrAnonStruct.Field", de, func(de json.Decoder, prop json.Token) (err error) {
				switch {
				case prop.Eq("Field"):
					if val := de.Token(); !val.Null() {
						p.Field.Field, err = val.String("ptrAnonStruct.Field.Field")
					}
				default:
					err = de.Skip()
				}
				return
			})

		default:
			err = de.Skip()
		}
		return
	})
}

func (a *arrPtrAnonStruct) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("arrPtrAnonStruct", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				a.Field = nil
			} else {
				a.Field = []*struct {
					Field string
				}{}
			}
			err = json.DecodeArr("arrPtrAnonStruct.Field", de, func(de json.Decoder) error {
				var item *struct {
					Field string
				}
				if !de.Peek().Null() {
					item = &struct {
						Field string
					}{}
				}
				err := json.DecodeObj("arrPtrAnonStruct.Field[]", de, func(de json.Decoder, prop json.Token) (err error) {
					switch {
					case prop.Eq("Field"):
						if val := de.Token(); !val.Null() {
							item.Field, err = val.String("arrPtrAnonStruct.Field[].Field")
						}
					default:
						err = de.Skip()
					}
					return
				})
				a.Field = append(a.Field, item)
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}

func (m *mapString) DecodeJSON(de json.Decoder) error {
	return json.DecodeObj("mapString", de, func(de json.Decoder, prop json.Token) (err error) {
		switch {
		case prop.Eq("Field"):
			if de.Peek().Null() {
				m.Field = nil
			} else if m.Field == nil {
				m.Field = map[string]string{}
			}
			err = json.DecodeObj("mapString.Field", de, func(de json.Decoder, prop json.Token) (err error) {
				k, _ := prop.String("")
				v, err := de.Token().String("mapString.Field{}")
				m.Field[k] = v
				return err
			})
		default:
			err = de.Skip()
		}
		return
	})
}
